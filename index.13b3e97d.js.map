{"mappings":"ACGA,IAAM,EAAQ,SAAS,aAAa,CAAC,SAC/B,EAAQ,SAAS,aAAa,CAAC,SAKrC,SAAS,IAYP,OAXY,MAAM,IAAI,CAAC,EAAM,gBAAgB,CAAC,OAAO,GAAG,CAAC,SAAC,CAA1D,EACE,IAAM,EAAQ,EAAI,gBAAgB,CAAC,MAEnC,MAAO,CACL,KAAM,CAAK,CAAC,EAAE,CAAC,WAAW,CAAC,IAAI,GAC/B,SAAU,CAAK,CAAC,EAAE,CAAC,WAAW,CAAC,IAAI,GACnC,IAAK,SAAS,CAAK,CAAC,EAAE,CAAC,WAAW,CAAC,IAAI,GAAI,IAC3C,OAAQ,WAAW,CAAK,CAAC,EAAE,CAAC,WAAW,CAAC,IAAI,GAAG,OAAO,CAAC,QAAS,IAClE,CACF,EAGF,CAhBA,SAAS,gBAAgB,CAAC,mBAAoB,GAC9C,EAAM,gBAAgB,CAAC,QAiBvB,SAAkB,CAAC,MAgBE,EAAa,EAGxB,EAHW,EAfF,AAKjB,WAGE,GAFA,EAAE,cAAc,GAEZ,AAAqB,OAArB,EAAE,MAAM,CAAC,OAAO,CAGlB,OAFa,EAAE,MAAM,CAAC,WAAW,AAIrC,EAbyB,GAeO,EAdjB,KAiBP,EAAS,CAAA,CACb,KAAM,OACN,SAAU,WACV,IAAK,MACL,OAAQ,QACV,CAAA,CAAC,CAPmB,EAAY,WAAW,GAO7B,GAGZ,EAAW,IAAI,CAAC,SAAC,CAAA,CAAG,CADtB,SAEI,AAAI,CAAC,CAAC,EAAO,CAAG,CAAC,CAAC,EAAO,CAChB,GAGL,CAAC,CAAC,EAAO,CAAG,CAAC,CAAC,EAAO,CAChB,EAGF,CACT,GAGF,AAGF,SAAqB,CAAQ,EAC3B,EAAM,SAAS,CAAG,GAEb,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAgB,CAAA,CAAA,OAAA,QAAA,CAAA,GAAhB,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAA0B,CAA1B,IAAM,EAAN,EAAA,KAAA,CACG,EAAM,SAAS,aAAa,CAAC,KAEnC,CAAA,EAAI,SAAS,CAAG,iBAER,MAAA,CADA,EAAO,IAAI,CAAC,uBAEZ,MAAA,CADA,EAAO,QAAQ,CAAC,uBAEhB,MAAA,CADA,EAAO,GAAG,CAAC,uBACmE,MAAA,CAA9E,EAAO,MAAM,CAAC,cAAc,CAAC,QAAS,CAAE,MAAO,WAAY,SAAU,KAAM,GAAG,iBAEtF,EAAM,WAAW,CAAC,EACpB,C,C,M,E,CAVK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAWP,EAjBc,EAkBhB","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\n// write code here\nvar thead = document.querySelector(\"thead\");\nvar tbody = document.querySelector(\"tbody\");\ndocument.addEventListener(\"DOMContentLoaded\", createArr);\nthead.addEventListener(\"click\", sortable);\nfunction createArr() {\n    var arr = Array.from(tbody.querySelectorAll(\"tr\")).map(function(row) {\n        var cells = row.querySelectorAll(\"td\");\n        return {\n            name: cells[0].textContent.trim(),\n            position: cells[1].textContent.trim(),\n            age: parseInt(cells[2].textContent.trim(), 10),\n            salary: parseFloat(cells[3].textContent.trim().replace(/[$,]/g, \"\"))\n        };\n    });\n    return arr;\n}\nfunction sortable(e) {\n    var headName = getName(e);\n    var newArr = createArr();\n    sortArray(headName, newArr);\n    function getName() {\n        e.preventDefault();\n        if (e.target.tagName === \"TH\") {\n            var info = e.target.textContent;\n            return info;\n        }\n    }\n    function sortArray(nameForSort, arrForSort) {\n        var sortingName = nameForSort.toLowerCase();\n        var sortBy = {\n            name: \"name\",\n            position: \"position\",\n            age: \"age\",\n            salary: \"salary\"\n        }[sortingName];\n        if (sortBy) arrForSort.sort(function(a, b) {\n            if (a[sortBy] < b[sortBy]) return -1;\n            if (a[sortBy] > b[sortBy]) return 1;\n            return 0;\n        });\n        updateTable(arrForSort);\n    }\n    function updateTable(finalArr) {\n        tbody.innerHTML = \"\";\n        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n        try {\n            for(var _iterator = finalArr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                var worker = _step.value;\n                var row = document.createElement(\"tr\");\n                row.innerHTML = \"\\n        <td>\".concat(worker.name, \"</td>\\n        <td>\").concat(worker.position, \"</td>\\n        <td>\").concat(worker.age, \"</td>\\n        <td>\").concat(worker.salary.toLocaleString(\"en-US\", {\n                    style: \"currency\",\n                    currency: \"USD\"\n                }), \"</td>\\n      \");\n                tbody.appendChild(row);\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally{\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                }\n            } finally{\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n    }\n}\n\n//# sourceMappingURL=index.13b3e97d.js.map\n","'use strict';\n\n// write code here\nconst thead = document.querySelector('thead');\nconst tbody = document.querySelector('tbody');\n\ndocument.addEventListener('DOMContentLoaded', createArr);\nthead.addEventListener('click', sortable);\n\nfunction createArr() {\n  const arr = Array.from(tbody.querySelectorAll('tr')).map((row) => {\n    const cells = row.querySelectorAll('td');\n\n    return {\n      name: cells[0].textContent.trim(),\n      position: cells[1].textContent.trim(),\n      age: parseInt(cells[2].textContent.trim(), 10),\n      salary: parseFloat(cells[3].textContent.trim().replace(/[$,]/g, '')),\n    };\n  });\n\n  return arr;\n}\n\nfunction sortable(e) {\n  const headName = getName(e);\n  const newArr = createArr();\n\n  sortArray(headName, newArr);\n\n  function getName() {\n    e.preventDefault();\n\n    if (e.target.tagName === 'TH') {\n      const info = e.target.textContent;\n\n      return info;\n    }\n  }\n\n  function sortArray(nameForSort, arrForSort) {\n    const sortingName = nameForSort.toLowerCase();\n\n    const sortBy = {\n      name: 'name',\n      position: 'position',\n      age: 'age',\n      salary: 'salary',\n    }[sortingName];\n\n    if (sortBy) {\n      arrForSort.sort((a, b) => {\n        if (a[sortBy] < b[sortBy]) {\n          return -1;\n        }\n\n        if (a[sortBy] > b[sortBy]) {\n          return 1;\n        }\n\n        return 0;\n      });\n    }\n\n    updateTable(arrForSort);\n  }\n\n  function updateTable(finalArr) {\n    tbody.innerHTML = '';\n\n    for (const worker of finalArr) {\n      const row = document.createElement('tr');\n\n      row.innerHTML = `\n        <td>${worker.name}</td>\n        <td>${worker.position}</td>\n        <td>${worker.age}</td>\n        <td>${worker.salary.toLocaleString('en-US', { style: 'currency', currency: 'USD' })}</td>\n      `;\n      tbody.appendChild(row);\n    }\n  }\n}\n"],"names":["thead","document","querySelector","tbody","createArr","Array","from","querySelectorAll","map","row","cells","name","textContent","trim","position","age","parseInt","salary","parseFloat","replace","addEventListener","e","nameForSort","arrForSort","sortBy","getName","preventDefault","target","tagName","toLowerCase","sort","a","b","updateTable","finalArr","innerHTML","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","worker","value","createElement","concat","toLocaleString","style","currency","appendChild","err","return"],"version":3,"file":"index.13b3e97d.js.map"}